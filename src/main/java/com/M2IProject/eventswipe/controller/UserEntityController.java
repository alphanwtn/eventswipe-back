package com.M2IProject.eventswipe.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.M2IProject.eventswipe.model.UserEntity;

@Controller // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /users (after Application path)
public class UserEntityController {
	@Autowired // This means to get the bean called UserEntityRepository

	// Which is auto-generated by Spring, we will use it to handle the data
	private com.M2IProject.eventswipe.repository.UserEntityRepository UserEntityRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String last_name
			, @RequestParam String email, @RequestParam String first_name, @RequestParam String city, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		UserEntity n = new UserEntity();
		n.setLast_name(last_name);
		n.setFirst_name(first_name);
		n.setEmail(email);
		n.setCity(city);
		n.setPassword(password);		
		UserEntityRepository.save(n);
		return "Saved";
	}

	//creating a get mapping that retrieves all the users detail from the database  
	@GetMapping(path="/all")
	public @ResponseBody Iterable<UserEntity> getAllUsers() {
		// This returns a JSON or XML with the users
		return UserEntityRepository.findAll();
	}

	//creating a delete mapping that deletes a specified book  
	@DeleteMapping("/user/{userid}")  
	private void deleteBook(@PathVariable("userid") int userid)   
	{  
		UserEntityService.delete(userid);  
	}

	//creating post mapping that post the book detail in the database  
	@PostMapping("/users")  
	private String saveBook(@RequestBody UserEntity users)   
	{  
		UserEntityService.saveOrUpdate(users);  
		return users.getId();  
	} 
	//creating put mapping that updates the book detail   
	@PutMapping("/books")  
	private Books update(@RequestBody Books books)   
	{  
		UserEntityService.saveOrUpdate(books);  
		return books;  
	} 		
}